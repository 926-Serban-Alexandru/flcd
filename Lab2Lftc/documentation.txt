https://github.com/926-Serban-Alexandru/flcd

Symbol table with one hash table for both identifier and constants
The HashTable class is a basic implementation of a hash table with methods for adding, checking the presence of, and retrieving the position of elements
The SymbolTable class is initialized with a specific size and uses the HashTable for storing symbols.

HashTable:

-Constructor (__init__):
The class is initialized with a capacity, which determines the number of buckets in the hash table.
An empty list is created to represent the hash table with 'capacity' empty buckets.
The capacity attribute is set to the given capacity

-get_capacity(self) Method:
This method simply returns the capacity of the hash table

-hash(self, key) Method:
This method is used to hash keys, which can be integers or strings.
If the key is an integer, it computes the hash value by taking the modulo of the key with the capacity.
If the key is a string, it uses a basic string hashing algorithm to compute the hash value.

-contains(self, key) Method:
This method checks if the hash table contains a given key.
It first computes the hash value for the key.
Then, it iterates through the list at the computed hash value and checks if the key exists in that list.
If it finds the key, it returns True; otherwise, it returns False.

-get_hash_value(self, key) Method:
This method returns the hash value for a given key. It is used to determine the bucket (list) where the key will be stored.
It calls the hash method and returns the result.

-add(self, key) Method:
This method is used to add a key to the hash table.
It computes the hash value for the key and appends the key to the list at the computed hash value.
If multiple keys hash to the same value, they will be stored in the same bucket as a list.

-get_position(self, key) Method:
This method returns the position (bucket index) where a key would be stored in the hash table.
It computes the hash value for the key and returns it.
If the hash value is -1, it means there was an issue hashing the key.

-__str__(self) Method:
This method provides a string representation of the hash table.
It returns a string representation of the list of buckets, which shows the keys stored in each bucket.


SymbolTable:

-Constructor (__init__):
The SymbolTable is initialized with a given size.
It creates an instance of the HashTable called hash_table with the same size. This HashTable will be used to store symbols.

-add_hash(self, name) Method:
This method allows you to add a name (symbol) to the symbol table.
It delegates the actual addition of the name to the add method of the underlying HashTable (in this case, the HashTable that was created during initialization).
The add method in the HashTable calculates the hash value for the name (using the hashing algorithm defined in the HashTable class) and inserts the name into the appropriate bucket.

-has_hash(self, name) Method:
This method checks if the symbol table contains a given name (symbol).
It delegates the check to the contains method of the underlying HashTable.
The contains method in the HashTable calculates the hash value for the name and then searches for it in the appropriate bucket.

-get_position_hash(self, name) Method:
This method retrieves the position (bucket index) where a given name would be stored in the symbol table.
It delegates the retrieval to the get_position method of the underlying HashTable. The get_position method calculates the hash value for the name and returns the bucket index.

-__str__(self) Method:
This method provides a string representation of the SymbolTable.
It includes the string representation of the underlying HashTable. The str(self.hash_table) part will call the __str__ method of the HashTable to produce a string representation of the hash table.